import os
import asyncio
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å—é–¥–∞! (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather) ---
BOT_TOKEN = "7535199249:AAHJnhqPj08EvntQqGoxGZrEpCFqfHJ2Yi8"  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π!

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
CHAT_USERNAMES = ['@NftProdazha1', '@NftProdazha3', '@NftProdazha4']
MESSAGE = '–ù–µ –∑–∞–±—É–¥—å –∑–∞–≥–ª—è–Ω—É—Ç—å –º–∞–≥–∞–∑–∏–Ω –Ω—Ñ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ @AxegarovShop'
INTERVAL = 2 * 60  # 2 –º–∏–Ω—É—Ç—ã

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='start_sending')],
        [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='stop_sending')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'start_sending':
        if not context.bot_data.get('is_sending', False):
            context.bot_data['is_sending'] = True
            await query.edit_message_text('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!')
            asyncio.create_task(send_messages_loop(context.bot, context))
        else:
            await query.edit_message_text('üîÅ –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.')
    elif query.data == 'stop_sending':
        context.bot_data['is_sending'] = False
        await query.edit_message_text('‚èπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')

async def send_messages_loop(bot: Bot, context: ContextTypes.DEFAULT_TYPE):
    while context.bot_data.get('is_sending', False):
        for chat in CHAT_USERNAMES:
            try:
                await bot.send_message(chat_id=chat, text=MESSAGE)
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat}")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat}: {e}")
        await asyncio.sleep(INTERVAL)

async def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
